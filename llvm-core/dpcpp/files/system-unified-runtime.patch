diff -Nur a/sycl/cmake/modules/FetchUnifiedRuntime.cmake b/sycl/cmake/modules/FetchUnifiedRuntime.cmake
--- a/sycl/cmake/modules/FetchUnifiedRuntime.cmake	2025-02-18 14:38:06.000000000 -0800
+++ b/sycl/cmake/modules/FetchUnifiedRuntime.cmake	2025-02-18 23:13:50.384694692 -0800
@@ -8,7 +8,52 @@
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-covered-switch-default")
 endif()
 
+find_package(unified-runtime REQUIRED)
+if(unified-runtime_FOUND)
+  message(STATUS "Using system Unified Runtime")
+  find_package(umf REQUIRED)
+
+  add_library(UnifiedRuntimeLoader ALIAS unified-runtime::ur_loader)
+  add_library(UnifiedRuntimeCommon ALIAS unified-runtime::ur_common)
+  add_library(ur_umf INTERFACE)
+  target_link_libraries(ur_umf INTERFACE
+    umf::umf
+    umf::headers
+    umf::disjoint_pool
+  )
+  add_library(UnifiedMemoryFramework ALIAS ur_umf)
+  add_library(UnifiedRuntime-Headers ALIAS unified-runtime::ur_headers)
+
+add_custom_target(UnifiedRuntimeAdapters)
+
+function(add_sycl_ur_adapter NAME)
+  add_dependencies(UnifiedRuntimeAdapters unified-runtime::ur_adapter_${NAME})
+endfunction()
+
+if("level_zero" IN_LIST SYCL_ENABLE_BACKENDS)
+  add_sycl_ur_adapter(level_zero)
+
+  # TODO: L0 adapter does other... things in its cmake - make sure they get
+  # added to the new build system
+endif()
 
+if("cuda" IN_LIST SYCL_ENABLE_BACKENDS)
+  add_sycl_ur_adapter(cuda)
+endif()
+
+if("hip" IN_LIST SYCL_ENABLE_BACKENDS)
+  add_sycl_ur_adapter(hip)
+endif()
+
+if("opencl" IN_LIST SYCL_ENABLE_BACKENDS)
+  add_sycl_ur_adapter(opencl)
+endif()
+
+if("native_cpu" IN_LIST SYCL_ENABLE_BACKENDS)
+  add_sycl_ur_adapter(native_cpu)
+endif()
+
+else()
 # Options to override the default behaviour of the FetchContent to include UR
 # source code.
 set(SYCL_UR_OVERRIDE_FETCH_CONTENT_REPO
@@ -315,3 +360,4 @@
   LIBRARY DESTINATION "lib${LLVM_LIBDIR_SUFFIX}" COMPONENT unified-memory-framework
   ARCHIVE DESTINATION "lib${LLVM_LIBDIR_SUFFIX}" COMPONENT unified-memory-framework
   RUNTIME DESTINATION "bin" COMPONENT unified-memory-framework)
+endif()
diff -Nur a/sycl/CMakeLists.txt b/sycl/CMakeLists.txt
--- a/sycl/CMakeLists.txt	2025-02-18 14:38:06.000000000 -0800
+++ b/sycl/CMakeLists.txt	2025-02-18 22:19:13.037912068 -0800
@@ -243,11 +243,6 @@
           sycl-device-aspect-macros-header
           boost_mp11-headers)
 
-list(APPEND UR_HEADERS_TO_COPY
-  ${UNIFIED_RUNTIME_INCLUDE_DIR}/ur_api.h
-  ${UNIFIED_RUNTIME_INCLUDE_DIR}/ur_api_funcs.def
-  ${UNIFIED_RUNTIME_INCLUDE_DIR}/ur_print.hpp
-)
 add_custom_command(
   OUTPUT  ${OUT_HEADERS_IN_SYCL_DIR}
           ${OUT_HEADERS_IN_CL_DIR}
@@ -257,13 +252,11 @@
           ${HEADERS_IN_CL_DIR}
           ${HEADERS_IN_STD_DIR}
           ${HEADERS_IN_SYCLCOMPAT_DIR}
-          ${UR_HEADERS_TO_COPY}
   COMMAND ${CMAKE_COMMAND} -E copy_directory ${sycl_inc_dir}/sycl ${SYCL_INCLUDE_BUILD_DIR}/sycl
   COMMAND ${CMAKE_COMMAND} -E copy_directory ${sycl_inc_dir}/CL ${SYCL_INCLUDE_BUILD_DIR}/CL
   COMMAND ${CMAKE_COMMAND} -E copy_directory ${sycl_inc_dir}/std ${SYCL_INCLUDE_BUILD_DIR}/std
   COMMAND ${CMAKE_COMMAND} -E copy_directory ${sycl_inc_dir}/syclcompat ${SYCL_INCLUDE_BUILD_DIR}/syclcompat
   COMMAND ${CMAKE_COMMAND} -E copy ${sycl_inc_dir}/syclcompat.hpp ${SYCL_INCLUDE_BUILD_DIR}/syclcompat.hpp
-  COMMAND ${CMAKE_COMMAND} -E copy ${UR_HEADERS_TO_COPY} ${SYCL_INCLUDE_BUILD_DIR}
   COMMENT "Copying SYCL headers ...")
 
 # Copy SYCL headers from source to install directory
@@ -273,12 +266,6 @@
 install(DIRECTORY ${BOOST_MP11_DESTINATION_DIR} DESTINATION ${SYCL_INCLUDE_DIR}/sycl/detail COMPONENT boost_mp11-headers)
 install(DIRECTORY "${sycl_inc_dir}/syclcompat" DESTINATION ${SYCL_INCLUDE_DIR} COMPONENT sycl-headers)
 install(FILES "${sycl_inc_dir}/syclcompat.hpp" DESTINATION ${SYCL_INCLUDE_DIR} COMPONENT sycl-headers)
-install(FILES "${UNIFIED_RUNTIME_INCLUDE_DIR}/ur_api.h" DESTINATION ${SYCL_INCLUDE_DIR}
-  COMPONENT sycl-headers)
-install(FILES "${UNIFIED_RUNTIME_INCLUDE_DIR}/ur_api_funcs.def" DESTINATION ${SYCL_INCLUDE_DIR}
-  COMPONENT sycl-headers)
-install(FILES "${UNIFIED_RUNTIME_INCLUDE_DIR}/ur_print.hpp" DESTINATION ${SYCL_INCLUDE_DIR}
-  COMPONENT sycl-headers)
 
 if (WIN32)
   set(SYCL_RT_LIBS sycl${SYCL_MAJOR_VERSION})
@@ -468,8 +455,6 @@
      sycl-headers-extras
      sycl
      libsycldevice
-     unified-memory-framework
-     unified-runtime-loader
      ${XPTIFW_LIBS}
      ${SYCL_TOOLCHAIN_DEPS}
 )
@@ -515,8 +500,8 @@
       "CUDA support requires adding \"libclc\" to the CMake argument \"LLVM_ENABLE_PROJECTS\"")
   endif()
 
-  add_dependencies(sycl-toolchain ur_adapter_cuda)
-  list(APPEND SYCL_TOOLCHAIN_DEPLOY_COMPONENTS ur_adapter_cuda)
+  add_dependencies(sycl-toolchain unified-runtime::ur_adapter_cuda)
+  #list(APPEND SYCL_TOOLCHAIN_DEPLOY_COMPONENTS ur_adapter_cuda)
 endif()
 
 if("hip" IN_LIST SYCL_ENABLE_BACKENDS)
@@ -532,8 +517,8 @@
       "HIP support requires adding \"lld\" to the CMake argument \"LLVM_ENABLE_PROJECTS\"")
   endif()
 
-  add_dependencies(sycl-toolchain ur_adapter_hip)
-  list(APPEND SYCL_TOOLCHAIN_DEPLOY_COMPONENTS ur_adapter_hip)
+  add_dependencies(sycl-toolchain unified-runtime::ur_adapter_hip)
+  #list(APPEND SYCL_TOOLCHAIN_DEPLOY_COMPONENTS ur_adapter_hip)
 endif()
 
 # Use it as fake dependency in order to force another command(s) to execute.
